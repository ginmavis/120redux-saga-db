120 : Mock Api workflow management(quản lý công việc)
	npm install @material-ui/core
	npm install @material-ui/icons
	npm install redux react-redux redux-thunk
	npm install axios
	- run server :
		json-server db.json
121 : Tích hợp Redux DevTools Version Mới (configureStore)

	- Bên trong redux : chứa file cầu hình store và tích hợp các
	middleware 	, ngoài ra còn có thể chứa các middleware khác cần thiêt

	- process.env.NODE_ENV : kiểm tra  môi trường
	- kết quả : đã @@INIT được store trong redux tool
122 : tích hợp axios  và xây dựng base Service
	- tính hợp redux-thunk (configureStore)
	- add task như module của database(api) chứa các action type
	- viết class gọi hỗ trợ các Api( đưa vào common or tạo mới thư mục Services)
	- constructor sẽ được gọi khi new class

	- có 1 class axiosService , khi tiến hành imports để sử dụng axiosService
	 tui sẽ gọi toán tử new thì nó sẽ ngay lập tức gọi ra toán tử instance thuộc
	 về class axiosService , đồng thời chạy hàm constructor,
	- khi thành công gọi về response
	- khi thất bại gọi Promise.reject
123
	- dùng axiosService để gọi api thông qua apis/task

	- connect redux
124
	- quy trình get data
	- B1: Gọi fetchListTaskRequest()
	- B2 : (khi gọi FETCH_TASK) Reset : state tasks=>[] (
		gọi dispatch(fetchListTask) trong fetchListTaskRequest )
	- B3 Khi gọi api thành công , đi vào then
		dispatch fetchListTaskSuccess(data)
	-  Tương tự với error

125 :
	tích hợp React-Toastify
	- import { ToastContainer, toast } from 'react-toastify';
  import 'react-toastify/dist/ReactToastify.css';
   vào app
	- add : npm install --save react-toastify
	- tách toastify trong helper
	- gọi toastify trong  redux/task

126 :  tổng quan redux saga
	- Side-Effect : là những tương tác của ứng dụng với thế giới bên ngoài :
	giao tiếp Api, đọc ghi file, analyst events
	- Trong redux : side-effect thường được xử lý ở action (action creator)
	or middleware
	- K xử lý ở reducer , vì reducer phải là pure funtion -hàm thuần túy
	- Redux thunk : Ta thường sử dụng đc để thực hiện gọi AJAX (call api).
	dispatch một action sau khi gọi API thành công hoặc dispatch một action
	trong quá trình callapi (VD : hiển thị 1 thanh tiến trình (loading) )
	- Sau đó đến store. Đảm  bảo đến store là 1 action
	- Demo :  thực hiện asynchronous(không đồng bộ), thay vì action creator trả về một  action,
	ta sẽ trả

	- redux-thunk :
		- Điểm mạnh :
			- Đơn giản , nhiều ví dụ , suorce example github nhiều
			- Mạnh mẽ
			- Dễ dàng , nhẹ nhàng
		- Điểm yếu :
			- Giải quyết bài toán phức tạp với các cách viết dài dòng, phức tạp, khó mô tả bài toán
			bằng code cho người đi sau
			- Khó đọc , khó maintain

	- Redux-Saga
		- Điểm mạnh :
			- Xử lý các quy trình dài hạn, phức tạp
			- Giải quyết các bài toán về chains of Promise
			- giúp clean code
		- Điểm yếu
			- Phức tạp.
			- Tốn thời gian dành cho thành viên mới vào team
			- Nặng về xử lý . Không dành cho ứng dụng đơn giản





Note :  -Containers là nơi connect tới redux lấy các state và dispatch các
        action
        - Components : dùng để hiển thị
		- Redux : chứa file cầu hình store và tích hợp các
		middleware 	, ngoài ra còn có thể chứa các middleware khác cần thiêt
		- common (tác dụng tương tự module)
		- apis :  chứa các hàm sẽ gọi api riêng biệt cho các module(axiosService/module)
		- helper : chứa các hàm xài chung ( có thể viết trong common)


		...middleware : là aray nên dùng dấu 3 chấm (tương đối)

